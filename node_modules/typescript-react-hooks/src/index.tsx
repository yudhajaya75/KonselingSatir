import * as React from 'react';

export interface WifiHotSpotListItem {
  ssid: string;
  macId: string;
}

// error type enums
export enum HotspotModuleErrors {
  PERMISSION_DENIED,
  EXCEPTION,
  HOTSPOT_HAS_NOT_STARTED_YET,
  HOTSPOT_AP_STATE_ENABLING,
  HOTSPOT_AP_STATE_DISABLING,
  HOTSPOT_AP_STATE_DISABLED,
  HOTSPOT_AP_STATE_FAILED,
  GSP_NOT_ENABLED,
  ACCESS_LOCATION_PERMISSION_DENIED,
}

export enum ConnectionType {
  MOBILE_DATA,
  WIFI,
  NOT_CONNECTED,
}

export enum EventChanel {
  WIFI_STATE_CHANGED = 'WIFI_STATE_CHANGED',
  WIFI_HOTSPOT_LIST_CHANGE = 'WIFI_HOTSPOT_LIST_CHANGE',
}

export const useWifiHotSpotListScannerListener = (): [
  WifiHotSpotListItem[],
  HotspotModuleErrors | null,
  () => void,
  () => void
] => {
  const [wifiHotSpotListItems, setWifiHotSpotListItems] = React.useState<
    WifiHotSpotListItem[]
  >([]);
  const [error] = React.useState<HotspotModuleErrors | null>(null);

  const removeWifiStateListener = React.useCallback(() => {}, []);

  const scan = async () => {
    setWifiHotSpotListItems([
      {
        macId: '4D:G4:A7:F2:TJ',
        ssid: 'SSID',
      },
    ]);
  };
  React.useEffect(() => {
    scan();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return [wifiHotSpotListItems, error, scan, removeWifiStateListener];
};
