"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGoogleAuth = void 0;
var react_1 = require("react");
var GApiProvider_1 = require("./GApiProvider");
/**
 * A declarative wrapper around the `GoogleAuth` object described here {@link https://developers.google.com/identity/sign-in/web/reference#authentication}.
 *
 * This hook manages loading the `GoogleAuth` object (by calling `gapi.auth2.init`).
 * This hook also listens for changes to the signedIn state and updates the return value.
 */
var useGoogleAuth = function () {
    var _a;
    var context = GApiProvider_1.useGApiContext();
    var _b = react_1.useState(null), googleAuth = _b[0], setGoogleAuth = _b[1];
    var _c = react_1.useState((_a = googleAuth === null || googleAuth === void 0 ? void 0 : googleAuth.isSignedIn.get()) !== null && _a !== void 0 ? _a : false), isSignedIn = _c[0], setIsSignedIn = _c[1];
    var _d = react_1.useState(null), error = _d[0], setError = _d[1];
    if (!context) {
        throw Error("Must use `useGoogleAuth` inside of `GoogleAuthProvider`");
    }
    var clientConfig = context.clientConfig, isAuth2Loaded = context.isAuth2Loaded;
    // Initialize `GoogleAuth` object
    react_1.useEffect(function () {
        if (isAuth2Loaded && !googleAuth) {
            gapi.auth2.init(clientConfig).then(function (googleAuth) { return setGoogleAuth(googleAuth); }, function (e) { return setError(Error(e.error + ": " + e.details)); });
        }
    }, [isAuth2Loaded, clientConfig, googleAuth]);
    // Listen for changes in the current user's sign-in state.
    react_1.useEffect(function () {
        if (isAuth2Loaded && googleAuth) {
            try {
                googleAuth.isSignedIn.listen(function (signedIn) { return setIsSignedIn(signedIn); });
            }
            catch (e) {
                setError(e);
            }
        }
    }, [isAuth2Loaded, googleAuth]);
    return {
        isSignedIn: isSignedIn,
        googleAuth: googleAuth,
        error: context.error || error,
    };
};
exports.useGoogleAuth = useGoogleAuth;
