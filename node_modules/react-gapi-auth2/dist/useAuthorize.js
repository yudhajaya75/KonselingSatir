"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthorize = void 0;
var react_1 = require("react");
var GApiProvider_1 = require("./GApiProvider");
/**
 * Declarative wrapper around `gapi.auth2.authorize`, read more here {@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2authorizeparams_callback}
 *
 * Performs a one time OAuth 2.0 authorization.
 * Depending on the parameters used, this will open a popup to the Google
 * sign-in flow or try to load the requested response silently, without user interaction.
 */
var useAuthorize = function (authorizeConfig) {
    var context = GApiProvider_1.useGApiContext();
    var _a = react_1.useState(null), error = _a[0], setError = _a[1];
    var _b = react_1.useState(null), authorizeResponse = _b[0], setAuthroizeResponse = _b[1];
    if (!context) {
        throw Error("Must use `useAuthorize` inside of `GoogleAuthProvider`");
    }
    react_1.useEffect(function () {
        try {
            gapi.auth2.authorize(authorizeConfig, function (res) {
                if (res.error) {
                    setError(Error(res.error_subtype + ", " + res.error));
                }
                setAuthroizeResponse(res);
            });
        }
        catch (e) {
            setError(e);
        }
    }, [authorizeConfig]);
    return {
        error: context.error || error,
        authorizeResponse: authorizeResponse,
    };
};
exports.useAuthorize = useAuthorize;
