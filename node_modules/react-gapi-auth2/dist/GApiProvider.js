"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GApiProvider = exports.useGApiContext = void 0;
/* eslint-disable react/prop-types */
// https://github.com/typescript-eslint/typescript-eslint/issues/2540
// eslint-disable-next-line no-use-before-define
var react_1 = __importStar(require("react"));
var loadGooglePlatform_1 = require("./loadGooglePlatform");
var GApiContext = react_1.createContext(null);
var useGApiContext = function () {
    return react_1.useContext(GApiContext);
};
exports.useGApiContext = useGApiContext;
/**
 * Loads the necessary `gapi` libraries. This is simply a wrapper for the
 * various `Auth Setup` methods described here: {@link https://developers.google.com/identity/sign-in/web/reference#auth_setup}
 *
 * You must wrap your application with `GApiProvider` to use any of
 * the hooks (`useAuthentication`, `useUsers` and `useAuthroize`).
 */
var GApiProvider = function (_a) {
    var children = _a.children, clientConfig = _a.clientConfig;
    var _b = react_1.useState(false), isPlatformLoaded = _b[0], setIsPlatformLoaded = _b[1];
    var _c = react_1.useState(false), isAuth2Loaded = _c[0], setIsAuth2Loaded = _c[1];
    var _d = react_1.useState(null), error = _d[0], setError = _d[1];
    // Load the Google APIs platform library to create the `gapi` object
    react_1.useEffect(function () {
        if (window.gapi) {
            setIsPlatformLoaded(true);
        }
        else {
            var cleanup = loadGooglePlatform_1.loadGooglePlatform(function () { return setIsPlatformLoaded(true); }, function (e) {
                return setError(Error("Error loading Google APIs platform \n" + e.message));
            });
            return cleanup;
        }
    }, []);
    // After the platform library loads, load the `auth2` library
    react_1.useEffect(function () {
        if (isPlatformLoaded && !isAuth2Loaded) {
            window.gapi.load("auth2:signin2", {
                onerror: function () { return setError(Error("Error loading auth2 library")); },
                callback: function () { return setIsAuth2Loaded(true); },
            });
        }
    }, [isPlatformLoaded, clientConfig, isAuth2Loaded]);
    var value = react_1.useMemo(function () { return ({
        clientConfig: clientConfig,
        isPlatformLoaded: isPlatformLoaded,
        isAuth2Loaded: isAuth2Loaded,
        error: error,
    }); }, [clientConfig, isPlatformLoaded, isAuth2Loaded, error]);
    return react_1.default.createElement(GApiContext.Provider, { value: value }, children);
};
exports.GApiProvider = GApiProvider;
