"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAuthentication = void 0;
var react_1 = require("react");
var GoogleAuthProvider_1 = require("./GoogleAuthProvider");
var useAuthentication = function () {
    var _a, _b, _c, _d, _e, _f, _g;
    var context = GoogleAuthProvider_1.useGoogleAuthContext();
    var _h = react_1.useState(((_b = (_a = context === null || context === void 0 ? void 0 : context.googleAuth) === null || _a === void 0 ? void 0 : _a.isSignedIn) === null || _b === void 0 ? void 0 : _b.get()) || false), isSignedIn = _h[0], setIsSignedIn = _h[1];
    if (!context) {
        throw Error("react-gapi-auth2: Must use `useAuthentication` inside of `GoogleAuthProvider`");
    }
    // Listen for changes in the current user's sign-in state.
    react_1.useEffect(function () {
        var _a;
        (_a = context.googleAuth) === null || _a === void 0 ? void 0 : _a.isSignedIn.listen(setIsSignedIn);
    }, [context.googleAuth]);
    return {
        errors: context.errors,
        isSignedIn: isSignedIn,
        signIn: (_c = context.googleAuth) === null || _c === void 0 ? void 0 : _c.signIn.bind(context.googleAuth),
        signOut: (_d = context.googleAuth) === null || _d === void 0 ? void 0 : _d.signOut.bind(context.googleAuth),
        disconnect: (_e = context.googleAuth) === null || _e === void 0 ? void 0 : _e.disconnect.bind(context.googleAuth),
        grantOfflineAccess: (_f = context.googleAuth) === null || _f === void 0 ? void 0 : _f.grantOfflineAccess.bind(context.googleAuth),
        attachClickHandler: (_g = context.googleAuth) === null || _g === void 0 ? void 0 : _g.attachClickHandler.bind(context.googleAuth),
    };
};
exports.useAuthentication = useAuthentication;
