"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignInButton = void 0;
/* eslint-disable react/prop-types */
// https://github.com/typescript-eslint/typescript-eslint/issues/2540
// eslint-disable-next-line no-use-before-define
var react_1 = __importStar(require("react"));
var GApiProvider_1 = require("./GApiProvider");
var useGoogleAuth_1 = require("./useGoogleAuth");
var defaultOptions = {};
/**
 * Render the default sign in button provided by `gapi.signin2.render`
 */
var SignInButton = function (_a) {
    var _b = _a.id, id = _b === void 0 ? "react-gapi-auth2-sign-in-button" : _b, _c = _a.options, options = _c === void 0 ? defaultOptions : _c;
    var context = GApiProvider_1.useGApiContext();
    var googleAuth = useGoogleAuth_1.useGoogleAuth().googleAuth;
    if (!context) {
        throw Error("Must use `SignInButton` inside of `GoogleAuthProvider`");
    }
    var isAuth2Loaded = context.isAuth2Loaded;
    react_1.useEffect(function () {
        if (isAuth2Loaded && googleAuth) {
            gapi.signin2.render(id, options);
        }
    }, [id, options, isAuth2Loaded, googleAuth]);
    return react_1.default.createElement("div", { id: id });
};
exports.SignInButton = SignInButton;
